#!/bin/bash

python3 - <<'EOF'
import subprocess
import json
import sys
import re
from pathlib import Path

def run(cmd, check=True):
    print(f"Running: {cmd}")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(result.stderr.strip())
        if check:
            raise subprocess.CalledProcessError(result.returncode, cmd)
    return result.stdout.strip()

# ===== Locate latest ceph-orch input file =====
files = sorted(Path("/tmp").glob("ceph-orch_*.json"))
if not files:
    print("‚ùå No ceph-orch_*.json file found in /tmp")
    sys.exit(1)

with open(files[-1]) as f:
    data = json.load(f)

print(f"Using input file: {files[-1]}")

# Extract variables
nodes_input = data.get("NODES_INPUT", "")
admin_host_ip = data["admin_host_ip"]
admin_host_user = data["admin_host_user"]
admin_host_pass = data["admin_host_pass"]
ceph_adminuser = data["ceph_adminuser"]

# ===== Parse hosts and IPs =====
ips = re.findall(r'value:([\d.]+)', nodes_input)
hosts = re.findall(r'key:([\w.-]+)', nodes_input)

if len(ips) != len(hosts) or len(set(ips)) != len(ips) or len(set(hosts)) != len(hosts):
    print("‚ùå Validation failed: mismatch or duplicates in hosts/IPs")
    sys.exit(1)

servers = [{"Hostname": h, "Host_IP": i} for h, i in zip(hosts, ips)]

print("‚úÖ IPs and hostnames are valid.")

# ===== Ping test =====
print("\nüì° Running ping test for each IP...")
failed = []
for s in servers:
    ip, host = s["Host_IP"], s["Hostname"]
    print(f"üîπ Pinging {ip} ({host})... ", end="")
    if subprocess.call(["ping", "-c", "2", "-W", "2", ip], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0:
        print("‚úÖ Reachable")
    else:
        print("‚ùå Unreachable")
        failed.append(ip)

if failed:
    print("\n‚ùå Error: Unreachable IPs:")
    for ip in failed:
        print(f"  - {ip}")
    sys.exit(1)
else:
    print("\n‚úÖ All IPs reachable!")

# ===== Step 1: Ensure deploy user =====
def ensure_deploy_user():
    print("\n=== Ensuring deploy user exists on all nodes ===")
    for s in servers:
        ip = s["Host_IP"]
        run(
            f'sshpass -p "{admin_host_pass}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {admin_host_user}@{ip} '
            f'"id -u {ceph_adminuser} >/dev/null 2>&1 || '
            f'(useradd -m -s /bin/bash {ceph_adminuser} && echo \\"{ceph_adminuser}:{admin_host_pass}\\" | chpasswd)"'
        )
        run(
            f'sshpass -p "{admin_host_pass}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {admin_host_user}@{ip} '
            f'"mkdir -p /home/{ceph_adminuser}/.ssh && chmod 700 /home/{ceph_adminuser}/.ssh && '
            f'touch /home/{ceph_adminuser}/.ssh/authorized_keys && chmod 600 /home/{ceph_adminuser}/.ssh/authorized_keys && '
            f'chown -R {ceph_adminuser}:{ceph_adminuser} /home/{ceph_adminuser}/.ssh && '
            f'echo \\"{ceph_adminuser} ALL=(ALL) NOPASSWD:ALL\\" > /etc/sudoers.d/{ceph_adminuser} && chmod 440 /etc/sudoers.d/{ceph_adminuser}"'
        )

# ===== Step 2: Copy ceph.pub =====
def ensure_ceph_key_access():
    print("\n=== Copying ceph.pub from admin host to all nodes ===")
    local_ceph_pub = "/tmp/ceph.pub"

    # Fetch from admin host
    run(
        f'sshpass -p "{admin_host_pass}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null '
        f'{admin_host_user}@{admin_host_ip}:/etc/ceph/ceph.pub {local_ceph_pub}'
    )

    for s in servers:
        ip = s["Host_IP"]
        if ip == admin_host_ip:
            continue  # skip admin host
        run(
            f'sshpass -p "{admin_host_pass}" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null '
            f'{local_ceph_pub} {admin_host_user}@{ip}:/tmp/ceph.pub'
        )
        run(
            f'sshpass -p "{admin_host_pass}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {admin_host_user}@{ip} '
            f'"cat /tmp/ceph.pub >> /home/{ceph_adminuser}/.ssh/authorized_keys && '
            f'chown {ceph_adminuser}:{ceph_adminuser} /home/{ceph_adminuser}/.ssh/authorized_keys && '
            f'chmod 600 /home/{ceph_adminuser}/.ssh/authorized_keys && rm -f /tmp/ceph.pub"'
        )

# ===== Step 3: Get existing Ceph hosts =====
def get_existing_hosts():
    print("\n=== Fetching existing hosts from Ceph cluster ===")
    out = run(
        f'sshpass -p "{admin_host_pass}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {admin_host_user}@{admin_host_ip} '
        f'"ceph orch host ls --format json-pretty"'
    )
    try:
        hosts = json.loads(out)
        return {h["addr"] for h in hosts}
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to parse ceph orch host ls output: {e}")
        return set()

# ===== Step 4: Add missing nodes dynamically =====
def add_hosts_to_cluster():
    print("\n=== Adding hosts to Ceph cluster ===")
    existing_hosts = get_existing_hosts()
    for s in servers:
        ip, host = s["Host_IP"], s["Hostname"]
        if ip == admin_host_ip or ip in existing_hosts:
            print(f"‚ÑπÔ∏è Skipping {host} ({ip}), already in cluster or admin host")
            continue
        run(
            f'sshpass -p "{admin_host_pass}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {admin_host_user}@{admin_host_ip} '
            f'"ceph orch host add {host} {ip}"'
        )

# ===== Step 5: Verify final cluster membership =====
def verify_cluster_hosts():
    print("\n=== Final Ceph cluster host list ===")
    out = run(
        f'sshpass -p "{admin_host_pass}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {admin_host_user}@{admin_host_ip} '
        f'"ceph orch host ls --format json-pretty"'
    )
    try:
        hosts = json.loads(out)
        for h in hosts:
            print(f"- {h['hostname']} ({h['addr']}) ‚Üí {h['status']}")
    except Exception:
        print(out)

if __name__ == "__main__":
    ensure_deploy_user()
    ensure_ceph_key_access()
    add_hosts_to_cluster()
    verify_cluster_hosts()
    print("\n‚úÖ Ceph deploy user, SSH access, sudo access, and cluster setup completed successfully.")
EOF
